(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))c(e);new MutationObserver(e=>{for(const a of e)if(a.type==="childList")for(const o of a.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&c(o)}).observe(document,{childList:!0,subtree:!0});function r(e){const a={};return e.integrity&&(a.integrity=e.integrity),e.referrerPolicy&&(a.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?a.credentials="include":e.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function c(e){if(e.ep)return;e.ep=!0;const a=r(e);fetch(e.href,a)}})();class f{constructor(){this.API_KEY="f9bde80f6b1ced07ded8d00810b72e7e",this.BASE_URL="https://gateway.marvel.com/v1/public/"}async fetchMarvelData(t,r={}){const c=new URL(`${this.BASE_URL}${t}`);c.search=new URLSearchParams({apikey:this.API_KEY,...r});try{const e=await fetch(c);if(!e.ok)throw new Error("Network response was not ok");return await e.json()}catch(e){throw console.error("Error fetching data:",e),e}}async fetchComicsByCharacterId(t){const r=`characters/${t}/comics`;return(await this.fetchMarvelData(r)).data.results}async findCharacterById(t){return(await this.fetchMarvelData(`characters/${t}`)).data.results[0]}}class p{constructor(t,r){this.characterId=t,this.character={},this.dataSource=r}async init(){try{const t=await this.dataSource.findCharacterById(this.characterId);if(t){this.character=t;const r=await this.dataSource.fetchComicsByCharacterId(this.characterId);this.renderCharacterDetails(r)}}catch(t){console.error("Error fetching character details:",t)}}renderCharacterDetails(t){const r=t.map(e=>`
                <div class="comic-item">
                    <a href="${`/comic_details/comic.html?comic=${e.id}`}">${e.title}</a>
                    <!-- Add image here if available -->
                </div>
            `).join(""),c=`
            <h2 id="charname">${this.character.name}</h2>
            <div class="info">
            <img src="${this.character.thumbnail.path}.${this.character.thumbnail.extension}" alt="${this.character.name}" />
            <div class="comics-container">${r}</div>
            </div>
        `;document.getElementById("character-details-container").innerHTML=c}}const d="f9bde80f6b1ced07ded8d00810b72e7e",h="https://gateway.marvel.com/v1/public/";function u(){const s=document.getElementById("searchInput"),t=document.getElementById("resultsContainer");let r=null;s.addEventListener("input",()=>{clearTimeout(r),r=setTimeout(()=>{c(s.value)},300)});function c(a){if(a)t.style.display="block";else{t.style.display="none";return}const o=`${h}characters?nameStartsWith=${encodeURIComponent(a)}&apikey=${d}`;fetch(o).then(n=>n.json()).then(n=>e(n.data.results)).catch(n=>console.error("Error:",n))}function e(a){t.innerHTML="",a.slice(0,10).forEach(o=>{const n=document.createElement("div");n.classList.add("result-item");const i=document.createElement("a");i.textContent=o.name,i.href=`/character_pages/character.html?character=${o.id}`,i.classList.add("result-link"),n.appendChild(i),t.appendChild(n)})}}async function m(s){try{const t=await fetch(s);if(!t.ok)throw new Error(`HTTP error! Status: ${t.status}`);return await t.text()}catch(t){console.error("Failed to load HTML:",t)}}async function l(s,t){const r=await m(s),c=document.getElementById(t);c?c.innerHTML=r:console.error(`Element with id '${t}' not found`)}async function y(){await l("/partials/header.html","main-header"),await l("/partials/footer.html","main-footer"),u()}export{p as C,f as M,y as l};
